// import * as React from 'react';
// import { alpha } from '@mui/material/styles';
// import Box from '@mui/material/Box';
// import Table from '@mui/material/Table';
// import TableBody from '@mui/material/TableBody';
// import TableCell from '@mui/material/TableCell';
// import TableContainer from '@mui/material/TableContainer';
// import TableHead from '@mui/material/TableHead';
// import TablePagination from '@mui/material/TablePagination';
// import TableRow from '@mui/material/TableRow';
// import TableSortLabel from '@mui/material/TableSortLabel';
// import Toolbar from '@mui/material/Toolbar';
// import Typography from '@mui/material/Typography';
// import Paper from '@mui/material/Paper';
// import Checkbox from '@mui/material/Checkbox';
// import IconButton from '@mui/material/IconButton';
// import Tooltip from '@mui/material/Tooltip';
// import DeleteIcon from '@mui/icons-material/Delete';
// import FilterListIcon from '@mui/icons-material/FilterList';
// import { visuallyHidden } from '@mui/utils';
// import { Button } from '@mui/material';
// import { OuterFrame } from '../components/outerFrameComponent';
// import profileIcon from '../assets/images/profileImage.png'
// import ClientDialog from '../components/clientDialogComponent';
// import { useNavigate } from 'react-router-dom';

// interface Data {
//     id: number;
//     fishfarm: number;
//     profile: string;
//     name: string;
// }

// function createData(
//     id: number,
//     profile: string,
//     name: string,
//     fishfarm: number,
// ): Data {
//     return {
//         id,
//         profile,
//         name,
//         fishfarm    
//     };
// }

// const rows = [
//     createData(1,'https://cdn-icons-png.flaticon.com/512/3135/3135715.png', 'Ann', 305),
//     createData(2,'../assets/images/profileImage.png', 'Mary', 305),
//     createData(3,'../assets/images/profileImage.png', 'Nat', 10),
//     createData(4,'../assets/images/profileImage.png', 'Ash', 305),
//     createData(5,'../assets/images/profileImage.png', 'Akiko', 2),
//     createData(6,'../assets/images/profileImage.png', 'Esh', 305),
//     createData(7,'../assets/images/profileImage.png', 'Edward', 40),
//     createData(8,'../assets/images/profileImage.png', 'Ann', 3),
//     createData(9,'../assets/images/profileImage.png', 'Ann', 10),
//     createData(10,'../assets/images/profileImage.png', 'Ann', 5)
    
// ];

// function descendingComparator<T>(a: T, b: T, orderBy: keyof T) {
//     if (b[orderBy] < a[orderBy]) {
//         return -1;
//     }
//     if (b[orderBy] > a[orderBy]) {
//         return 1;
//     }
//     return 0;
// }

// type Order = 'asc' | 'desc';

// function getComparator<Key extends keyof any>(
//     order: Order,
//     orderBy: Key,
// ): (
//     a: { [key in Key]: number | string },
//     b: { [key in Key]: number | string },
// ) => number {
//     return order === 'desc'
//         ? (a, b) => descendingComparator(a, b, orderBy)
//         : (a, b) => -descendingComparator(a, b, orderBy);
// }


// function stableSort<T>(array: readonly T[], comparator: (a: T, b: T) => number) {
//     const stabilizedThis = array.map((el, index) => [el, index] as [T, number]);
//     stabilizedThis.sort((a, b) => {
//         const order = comparator(a[0], b[0]);
//         if (order !== 0) {
//             return order;
//         }
//         return a[1] - b[1];
//     });
//     return stabilizedThis.map((el) => el[0]);
// }

// interface HeadCell {
//     disablePadding: boolean;
//     id: keyof Data;
//     label: string;
//     numeric: boolean;
// }

// const headCells: readonly HeadCell[] = [
//     {
//         id: 'id',
//         numeric: false,
//         disablePadding: true,
//         label: 'Id',
//     },
//     {
//         id: 'profile',
//         numeric: false,
//         disablePadding: true,
//         label: 'Profile picture',
//     },
//     {
//         id: 'name',
//         numeric: false,
//         disablePadding: true,
//         label: 'Name',
//     },  
//     {
//         id: 'fishfarm',
//         numeric: true,
//         disablePadding: true,
//         label: 'Number of fish farms',
//     },
    
// ];

// interface EnhancedTableProps {
//     numSelected: number;
//     onRequestSort: (event: React.MouseEvent<unknown>, property: keyof Data) => void;
//     onSelectAllClick: (event: React.ChangeEvent<HTMLInputElement>) => void;
//     order: Order;
//     orderBy: string;
//     rowCount: number;
// }

// function EnhancedTableHead(props: EnhancedTableProps) {
//     const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =
//         props;
//     const createSortHandler =
//         (property: keyof Data) => (event: React.MouseEvent<unknown>) => {
//             onRequestSort(event, property);
//         };

//     return (
//         <TableHead>
//             <TableRow>
//                 <TableCell padding="checkbox">
//                     <Checkbox
//                         color="primary"
//                         indeterminate={numSelected > 0 && numSelected < rowCount}
//                         checked={rowCount > 0 && numSelected === rowCount}
//                         onChange={onSelectAllClick}
//                         inputProps={{
//                             'aria-label': 'select all',
//                         }}
//                     />
//                 </TableCell>
//                 {headCells.map((headCell) => (
//                     <TableCell
//                         key={headCell.id}
//                         align={headCell.numeric ? 'right' : 'center'}
//                         padding={headCell.disablePadding ? 'none' : 'normal'}
//                         sortDirection={orderBy === headCell.id ? order : false}
//                     >
//                         <TableSortLabel
//                             active={orderBy === headCell.id}
//                             direction={orderBy === headCell.id ? order : 'asc'}
//                             onClick={createSortHandler(headCell.id)}
//                         >
//                             {headCell.label}
//                             {orderBy === headCell.id ? (
//                                 <Box component="span" sx={visuallyHidden}>
//                                     {order === 'desc' ? 'sorted descending' : 'sorted ascending'}
//                                 </Box>
//                             ) : null}
//                         </TableSortLabel>
//                     </TableCell>
//                 ))}
//                 <TableCell></TableCell>
//             </TableRow>
//         </TableHead>
//     );
// }

// interface EnhancedTableToolbarProps {
//     numSelected: number;
// }

// function EnhancedTableToolbar(props: EnhancedTableToolbarProps) {
//     const { numSelected } = props;

//     return (
//         <Toolbar
//             sx={{
//                 pl: { sm: 2 },
//                 pr: { xs: 1, sm: 1 },
//                 ...(numSelected > 0 && {
//                     bgcolor: (theme) =>
//                         alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),
//                 }),
//             }}
//         >
//             {numSelected > 0 ? (
//                 <Typography
//                     sx={{ flex: '1 1 100%' }}
//                     color="inherit"
//                     variant="subtitle1"
//                     component="div"
//                 >
//                     {numSelected} selected
//                 </Typography>
//             ) : (
//                 <Typography
//                     sx={{ flex: '1 1 100%' }}
//                     variant="h6"
//                     id="tableTitle"
//                     component="div"
//                 >
//                     Clients
//                 </Typography>
//             )}
//             {numSelected > 0 ? (
//                 <Tooltip title="Delete">
//                     <IconButton>
//                         <DeleteIcon />
//                     </IconButton>
//                 </Tooltip>
//             ) : (
//                 <Tooltip title="Filter list">
//                     <IconButton>
//                         <FilterListIcon />
//                     </IconButton>
//                 </Tooltip>
//             )}
//         </Toolbar>
//     );
// }
// export default function ClientTable() {
//     const [order, setOrder] = React.useState<Order>('asc');
//     const [orderBy, setOrderBy] = React.useState<keyof Data>('fishfarm');
//     const [selected, setSelected] = React.useState<readonly number[]>([]);
//     const [page, setPage] = React.useState(0);
//     const [dense, setDense] = React.useState(false);
//     const [rowsPerPage, setRowsPerPage] = React.useState(5);
//     const [open, setOpen] = React.useState(false)

//     const handleRequestSort = (
//         event: React.MouseEvent<unknown>,
//         property: keyof Data,
//     ) => {
//         const isAsc = orderBy === property && order === 'asc';
//         setOrder(isAsc ? 'desc' : 'asc');
//         setOrderBy(property);
//     };

//     const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {
//         if (event.target.checked) {
//             const newSelected = rows.map((n) => n.id);
//             setSelected(newSelected);
//             return;
//         }
//         setSelected([]);
//     };
//     const handleClickOpen = () => {
//         setOpen(true);
//       };

//     const handleClick = (event: React.MouseEvent<unknown>, id: number) => {
//         const selectedIndex = selected.indexOf(id);
//         let newSelected: readonly number[] = [];

//         if (selectedIndex === -1) {
//             newSelected = newSelected.concat(selected, id);
//         } else if (selectedIndex === 0) {
//             newSelected = newSelected.concat(selected.slice(1));
//         } else if (selectedIndex === selected.length - 1) {
//             newSelected = newSelected.concat(selected.slice(0, -1));
//         } else if (selectedIndex > 0) {
//             newSelected = newSelected.concat(
//                 selected.slice(0, selectedIndex),
//                 selected.slice(selectedIndex + 1),
//             );
//         }
//         setSelected(newSelected);
//     };

//     const handleChangePage = (event: unknown, newPage: number) => {
//         setPage(newPage);
//     };

//     const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
//         setRowsPerPage(parseInt(event.target.value, 10));
//         setPage(0);
//     };

//     //   const handleChangeDense = (event: React.ChangeEvent<HTMLInputElement>) => {
//     //     setDense(event.target.checked);
//     //   };

//     const isSelected = (id: number) => selected.indexOf(id) !== -1;

//     // Avoid a layout jump when reaching the last page with empty rows.
//     const emptyRows =
//         page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;

//     const visibleRows = React.useMemo(
//         () =>
//             stableSort(rows, getComparator(order, orderBy)).slice(
//                 page * rowsPerPage,
//                 page * rowsPerPage + rowsPerPage,
//             ),
//         [order, orderBy, page, rowsPerPage],
//     );
//     const navigate = useNavigate();
//     return (
//         <OuterFrame>
//             <ClientDialog open={open} setOpen={setOpen}/>
//         <Box sx={{ width: '100%' }}>
//             <Paper sx={{ width: '100%', mb: 2 }}>
//                 <EnhancedTableToolbar numSelected={selected.length} />
//                 <TableContainer>
//                     <Table
//                         sx={{ minWidth: 750 }}
//                         aria-labelledby="clientTable"
//                         size={dense ? 'small' : 'medium'}
//                     >
//                         <EnhancedTableHead
//                             numSelected={selected.length}
//                             order={order}
//                             orderBy={orderBy}
//                             onSelectAllClick={handleSelectAllClick}
//                             onRequestSort={handleRequestSort}
//                             rowCount={rows.length}
//                         />
//                         <TableBody>
//                             {visibleRows.map((row, index) => {
//                                 const isItemSelected = isSelected(row.id);
//                                 const labelId = `enhanced-table-checkbox-${index}`;

//                                 return (
//                                     <TableRow
//                                         hover
//                                         onClick={(event) => handleClick(event, row.id)}
//                                         role="checkbox"
//                                         aria-checked={isItemSelected}
//                                         tabIndex={-1}
//                                         key={row.id}
//                                         selected={isItemSelected}
//                                         sx={{ cursor: 'pointer' }}
//                                     >
//                                         <TableCell padding="checkbox">
//                                             <Checkbox
//                                                 color="primary"
//                                                 checked={isItemSelected}
//                                                 inputProps={{
//                                                     'aria-labelledby': labelId,
//                                                 }}
//                                             />
//                                         </TableCell>
//                                         <TableCell
//                                             component="th"
//                                             id={labelId}
//                                             scope="row"
//                                             padding="none"
//                                         >
//                                             {row.id}
//                                         </TableCell>
//                                         <TableCell align="center">
//                                             <img 
//                                                 style={{
//                                                     borderRadius : '50%',
//                                                     height : 40, 
//                                                     width : 40,
//                                                     alignSelf : 'center'}} 
//                                                 src={profileIcon}/>
//                                         </TableCell>
//                                         <TableCell align="center">{row.name}</TableCell>
//                                         <TableCell align="right">{row.fishfarm}</TableCell>
//                                         <TableCell align="center">
//                                             <Button onClick={() => navigate('/clientView/addFishfarm')} variant='contained'>Add Fish farm</Button>
//                                             <Button onClick={() => navigate('/clientView/fishfarm')}>See more infor..</Button>
//                                         </TableCell>
//                                     </TableRow>
//                                 );
//                             })}
//                             {emptyRows > 0 && (
//                                 <TableRow
//                                     style={{
//                                         height: (dense ? 33 : 53) * emptyRows,
//                                     }}
//                                 >
//                                     <TableCell colSpan={6} />
//                                 </TableRow>
//                             )}
//                         </TableBody>
//                     </Table>
//                 </TableContainer>
//                 <TablePagination
//                     rowsPerPageOptions={[5, 10, 25]}
//                     component="div"
//                     count={rows.length}
//                     rowsPerPage={rowsPerPage}
//                     page={page}
//                     onPageChange={handleChangePage}
//                     onRowsPerPageChange={handleChangeRowsPerPage}
//                 />
//             </Paper>
//             {/* <FormControlLabel
//         control={<Switch checked={dense} onChange={handleChangeDense} />}
//         label="Dense padding"
//       /> */}
//         </Box>
//         </OuterFrame>
//     );
// }